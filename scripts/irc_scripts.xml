<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>irc_scripts</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>main</name>
				<packageName></packageName>
				<script>irc = irc or {}
irc.enabled = irc.enabled or false
irc.gag = irc.gag or false
irc.reply_to = irc.reply_to or nil
irc.default_server = "irc.libera.chat"
irc.default_port = 6697
irc.default_channel = "#wotlounge"
irc.default_secure = true
irc.default_color = "orange"
irc.topic_color = "turquoise"
irc.chat_color = "orange"
irc.tell_color = "red"
irc.muted_color = closestColor("#555555")
irc.irc_tag = f" &lt;{irc.muted_color}&gt;&lt;i&gt;-irc&lt;/i&gt;"
irc.discord_tag = f" &lt;{irc.muted_color}&gt;&lt;i&gt;-discord&lt;/i&gt;"</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>inbound</name>
				<packageName></packageName>
				<script>function irc:on_receive_irc(_, sender, target, message)
  if self.debug then
    self:echo(f"&lt;blue&gt;({target}) {sender}: {message}")
  end
  
  --Fix IRC bug
  message = message:gsub("&amp;lt;", "&lt;")
  
  local host = getIrcConnectedHost()
  local nick = getIrcNick()
  
  --Calculate target type
  local target_type = "nick"
  if target:match("^[#&amp;]") then
    target_type = "channel"
  elseif target:match("[.*]") then
    target_type = "server"
  end
  
  --Gag when connect starts
  local starting = not host or (target_type == "server" and message:match("^%*%*%*"))
  self.gag = self.gag or starting
  
  --Apply rules and echo transformed message
  local result = self:apply_rules(sender, target, message, target_type)
  if result then
    self:echo(result.message, result.targets)
  end
  
  --Ungag after joining channel
  local ending = host and target_type == "channel" and message:match("^! %S+ has %d+ users:")
  self.gag = self.gag and not ending
  
  --Capture sender/reply to
  self.reply_to = target == nick and sender or self.reply_to  
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>rules</name>
				<packageName></packageName>
				<script>function irc:apply_rules(sender, target, message, target_type)  
  local rules
  if target_type == "server" then
    rules = {
      exclusions = {},
      inclusions = {
        {patt = "^%[ERROR%]", repl = f"&lt;red&gt;%0", targets = {"main", "misc"}},
        {patt = "^%[900%] .+ (You are now logged in as %S+)", repl = "%1", targets = {"main", "misc"}},    
        {patt = "^! (.+)$", repl = "%1", targets = {"main", "misc"}},
        {patt = "^* (.+)$", repl = "%1", targets = {"main", "misc"}},
        {patt = "^.*$", repl = f"%0", targets = {"main", "misc"}}
      }
    }
  elseif target_type == "nick" then
    rules = {
      exclusions = {},
      inclusions = {
        {patt = "^Your nick has changed.$", repl = f"Your nick has changed to {target}.", targets = {"main", "misc"}},
        {patt = "^%[NickServ%] .*$", repl = f"&lt;{self.tell_color}&gt;%0", targets = {"main", "misc"}},
        {patt = "^%[ChanServ%] .*$", repl = f"&lt;{self.tell_color}&gt;%0", targets = {"main", "misc"}},
        {patt = "^! (.+)$", repl = f"%1", targets = {"main", "misc"}},
        {patt = "^* (.+)$", repl = f"&lt;{self.tell_color}&gt;%1 {self.irc_tag}", targets = {"main", "tells"}},
        {patt = "^.*$", repl = f"&lt;{self.tell_color}&gt;{sender} tells you '%0' {self.irc_tag}", targets = {"main", "tells"}}
      }
    }
  elseif target_type == "channel" then
    if sender == "wotdiscord" then
      rules = {
        exclusions = {},
        inclusions = {
          {patt = f"^! {sender} ([^:]+): (.+)$", repl = f"%1 %2", targets = {"main", "misc"}},
          {patt = f"^* {sender} ([^:]+): (.+)$", repl = f"&lt;{self.chat_color}&gt;%1 %2 {self.discord_tag}", targets = {"main", "chats", "narrates"}},
          {patt = "^([^:]+): (.+)$", repl = f"&lt;{self.chat_color}&gt;%1 chats '%2' {self.discord_tag}", targets = {"main", "chats", "narrates"}},
          {patt = "^.*$", repl = f"&lt;{self.chat_color}&gt;{sender} chats '%0' {self.discord_tag}", targets = {"main", "chats", "narrates"}}
        }
      }
    else
      rules = {
        exclusions = {},
        inclusions = {
          {patt = "^%[TOPIC%] .+$", repl = f"&lt;{self.topic_color}&gt;%0", targets = {"main", "misc"}},
          {patt = "^! (.+)$", repl = f"%1", targets = {"main", "misc"}},
          {patt = "^* (.+)$", repl = f"&lt;{self.chat_color}&gt;%1 {self.irc_tag}", targets = {"main", "chats", "narrates"}},
          {patt = "^.*$", repl = f"&lt;{self.chat_color}&gt;{sender} chats '%0' {self.irc_tag}", targets = {"main", "chats", "narrates"}}
        }
      }
    end
  end
  
  if self.gag then  
    table.insert(rules.exclusions, {patt = "^%*%*%*"})
    table.insert(rules.exclusions, {patt = "^%[INFO%]"})
    table.insert(rules.exclusions, {patt = "^%[MOTD%]"})
    table.insert(rules.exclusions, {patt = "^%[NickServ%] This nickname is registered%. Please choose a different nickname, or identify via /msg NickServ IDENTIFY %S+ &lt;password&gt;$"})
    table.insert(rules.exclusions, {patt = "^%[NickServ%] You have 30 seconds to identify to your nickname before it is changed%.$"})
    table.insert(rules.exclusions, {patt = "^%[NickServ] You are now identified for %S+%.$"})
    table.insert(rules.exclusions, {patt = "^%[NickServ] Last login from: .+$"})
    table.insert(rules.exclusions, {patt = "^%[396%] user/%S+ is now your hidden host %(set by services.%)$"})
    for _, inclusion in ipairs(rules.inclusions) do
      inclusion.targets = table.n_complement(inclusion.targets, {"main"})
    end
  end
  
  local exclude = nil
  if rules.exclusions then
    for _, exclusion in ipairs(rules.exclusions) do
      if message:match(exclusion.patt) then
        exclude = exclusion
        break
      end
    end
  end
  
  local include = nil
  if rules.inclusions and not exclude then
    for _, inclusion in ipairs(rules.inclusions) do
      if message:match(inclusion.patt) then
        include = inclusion
        break
      end
    end
  end
  
  if include then
    message = message:gsub(include.patt, include.repl)
    message = message:gsub(getIrcConnectedHost() or getIrcServer(), "Server")
    return {
      message = message,
      targets = include.targets
    }
  end
  
  return nil
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>console</name>
				<packageName></packageName>
				<script>function irc:echo(message, targets)
  targets = targets or {"main", "misc"}
  local all_tabs = {"all", "narrates", "chats", "tells", "says", "yells", "misc"}      
  
  local wins = table.n_complement(targets, all_tabs)
  for _, win in ipairs(wins) do
    cecho(win, f"\n&lt;{self.default_color}&gt;{message}\n")
  end
  
  local tabs = table.n_intersection(targets, all_tabs)
  if not table.is_empty(tabs) then
    local time = getTime(true, "HH:mm")
    for _, tab in ipairs(table.n_union(tabs, {"all"})) do
      cecho(f"communications.{tab:title()}", f"{time} &lt;{self.default_color}&gt;{message}\n")
    end
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>settings</name>
				<packageName></packageName>
				<script>function irc:load_settings()
  local result = nil
  local path = getMudletHomeDir() .. "/irc.json"
  if io.exists(path) then
    local file = io.open(path, "r")
    result = yajl.to_value(file:read("*all"))
    io.close(file)
  end
  if result and tonumber(result.revision) == 1 then
    self.enabled = result.enabled
  else
    self:reset_settings()
  end
end

function irc:save_settings()
  local path = getMudletHomeDir() .. "/irc.json"    
  local file = io.open(path, "w")
  file:write(yajl.to_string({
    revision = 1,
    enabled = self.enabled
  }))
  io.close(file)
end

function irc:reset_settings()
  self.enabled = true
  self:save_settings()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>events</name>
				<packageName></packageName>
				<script>--note: this should be the last script in order of execution
function irc:on_sys_install(_, name)
  if name == "irc" or name == "irc_scripts" then
    setIrcServer(self.default_server, self.default_port, self.default_secure)
    setIrcChannels({self.default_channel})
    self:reset_settings()
    self:echo(f"IRC is {self.enabled and 'starting...' or 'disabled'}")
    if self.enabled then
      sendIrc("", "")
    end
  end
end

function irc:on_sys_load()
  self:load_settings()
  self:echo(f"IRC is {self.enabled and 'starting...' or 'disabled'}")
  if self.enabled then
    sendIrc("", "")
  end
end

registerAnonymousEventHandler("sysInstallPackage", "irc:on_sys_install")
registerAnonymousEventHandler("sysLoadEvent", "irc:on_sys_load")
registerAnonymousEventHandler("sysIrcMessage", "irc:on_receive_irc")</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
